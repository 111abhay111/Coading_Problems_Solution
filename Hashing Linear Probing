print("Hello World")
#   Hashing Linear Probing
class Dictionary:
    def __init__(self,size):
        self.size=size
        self.slots=[None]*self.size
        self.data=[None]*self.size
    def put(self,key,value):
        hash_value=self.hash_function(key)
        if self.slots[hash_value]==None:
            self.slots[hash_value]=key
            self.data[hash_value]=value
        else:
            if self.slots[hash_value]==key:
                self.data[hash_value]=value
            else:
                new_hash_value=self.rehash(hash_value)
                while(self.slots[new_hash_value]!=None and self.slots[new_hash_value]!=key):
                    new_hash_value=self.rehash(new_hash_value)
                if self.slots[new_hash_value]==None:
                    self.slots[new_hash_value]=key
                    self.data[new_hash_value]=value
                else:
                    self.data[new_hash_value]=value
                    
    def hash_function(self,key):
        return abs(hash(key))%self.size
        
    def rehash(self, old_hash_value):
        return (old_hash_value+1)%self.size
        
    def __setitem__(self,key,value):
        self.put(key,value)
        
    def get(self,key):
        start_pos=self.hash_function(key)
        curr_pos=start_pos
        while self.slots[curr_pos]!=None:
            if self.slots[curr_pos]==key:
                return self.data[curr_pos]
            curr_pos=self.rehash(curr_pos)
            if curr_pos==start_pos:
                return "Not Found"
        return "None wala Not Found"
    def __str__(self):
        for i in range(len(self.slots)):
            if self.slots[i]!=None:
                print(self.slots[i],":",self.data[i],end=' ')
        print()
        return ""
        
d=Dictionary(3)
d.put("python",10)
d.put("Java",20)
d.__str__()
print(d.get("Javac"))
